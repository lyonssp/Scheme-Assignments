#lang racket/gui
(require racket/class)

(define frame (new frame%
                   [label "Canvas"]
                   [width 500]
                   [height 500]
                   ))

(define canvas (new canvas% [parent frame]
             [paint-callback
              (lambda (canvas dc)
                (send dc set-background "black")
                (send dc clear)
                ;(drawharry dc)
                )]))

(define dc (send canvas get-dc))

(send frame show #t)
(sleep/yield 1)

(define point
  (lambda (x y [depth 1])
    (new point% [x x] [y y] [depth depth])))

(define draw-point
  (lambda (point)
    (send dc set-pen "white" 1 'solid)
    (send dc draw-point (send point get-x) (send point get-y))))

(define point%
  (class object%
    (super-new)
    (init-field x y [depth 1])
    (define/public get-x
      (lambda ()
        x))
    (define/public get-y
      (lambda ()
        y))
    (define/public type?
      (lambda ()
      'point))
    (define/public depth?
      (lambda ()
        depth))
    (define/public draw
      (lambda ()
        (send dc set-pen "white" 1 'solid)
        (send dc draw-point (get-x) (get-y))))
  ))

(define draw
  (lambda (object)
    (send object draw)))

(define type
  (lambda (object)
    (send object type?)))

(define depth
  (lambda (object)
    (send object depth?)))
    
(define point?
  (lambda (object)
    (cond ((equal? (send object type?) 'point) #t)
          (else #f))))

(define rectangle%
  (class object%
    (super-new)
    (init-field pointx pointy [color '()] [depth 1])
    (define/public get-x
      (lambda ()
        (send pointx get-x)))
    (define/public get-y
      (lambda ()
        (send pointx get-y)))
    (define/public get-width
      (lambda ()
        (abs(- (send pointx get-x) (send pointy get-x)))))
    (define/public get-height
      (lambda ()
        (abs(- (send pointx get-y) (send pointy get-y)))))
    (define/public get-color
      (lambda ()
        color))
    (define/public type?
      (lambda ()
      'rectangle))
    (define/public depth?
      (lambda ()
        depth))
    (define/public draw
      (lambda ()
        (cond ((not(string? (get-color))) (send dc set-pen "white" 1 'solid) (send dc set-brush "white" 'transparent) 
                                        (send dc draw-rectangle (get-x) (get-y) (get-width) (get-height))) 
              (else (send dc set-pen (get-color) 1 'solid) (send dc set-brush (get-color) 'solid)
                    (send dc draw-rectangle (get-x) (get-y) (get-width) (get-height))))))
  ))

(define rectangle
  (lambda (pointx pointy [color '()] [depth 1])
    (new rectangle% [pointx pointx] [pointy pointy] [color color] [depth depth])))

(define draw-rectangle
  (lambda (rec)
    (cond ((equal? (send rec get-color) '()) (send dc set-pen "white" 1 'solid) (send dc set-brush "white" 'transparent) 
                                                       (send dc draw-rectangle (send rec get-x) (send rec get-y) (send rec get-width) (send rec get-height))) 
          (else (send dc set-pen (send rec get-color) 1 'solid) (send dc set-brush (send rec get-color) 'solid)
                (send dc draw-rectangle (send rec get-x) (send rec get-y) (send rec get-width) (send rec get-height))))
    (send dc draw-rectangle (send rec get-x) (send rec get-y) (send rec get-width) (send rec get-height))))
    
(define rectangle?
  (lambda (object)
    (cond ((equal? (send object type?) 'rectangle) #t)
          (else #f))))

(define polygon%
  (class object%
    (super-new)
    (init-field points [color '()] [depth 1])

    (define/public get-points
      (lambda ()
        points))
    
    (define/public get-color
      (lambda ()
        (cond ((null? color) '())
              (else (car color)))))

    (define/public type?
      (lambda ()
      'polygon))
    
    (define/public depth?
      (lambda ()
        depth))
    
    (define/public draw
      (lambda ()
        (cond ((equal? (get-color) '()) (send dc set-pen "white" 1 'solid) (send dc set-brush "white" 'transparent) 
                                                       (send dc draw-polygon (get-points))) 
          (else (send dc set-pen (get-color) 1 'solid) (send dc set-brush (get-color) 'solid)
                (send dc draw-polygon (get-points))))
    ))
  ))

(define polygon
  (lambda vars
    (define color '())
    (define depth 1)
    (define createlist
      (lambda (vars)
        (cond ((null? vars) '())
              ((string? (car vars)) (set! color vars) (createlist (cdr vars)) '())
              ((not(object? (car vars))) (set! depth (car vars)) '())
              (else
               (cons (cons (send (car vars) get-x) (send (car vars) get-y)) (createlist (cdr vars))))
              )))
    (new polygon% [points (createlist vars)] [color color] [depth depth])
              ))

(define draw-polygon
  (lambda (poly)
    (cond ((equal? (send poly get-color) '()) (send dc set-pen "white" 1 'solid) (send dc set-brush "white" 'transparent) 
                                                       (send dc draw-polygon (send poly get-points))) 
          (else (send dc set-pen (send poly get-color) 1 'solid) (send dc set-brush (send poly get-color) 'solid)
                (send dc draw-polygon (send poly get-points))))
    ))

(define polygon?
  (lambda (object)
    (cond ((equal? (send object type?) 'polygon) #t)
          (else #f))))

(define scene%
  (class object%
    (super-new)
    (init-field objects)

    (define/public type?
      (lambda ()
      'scene))
    
    (define lessthandepth
      (lambda (a b)
        (cond ((< (depth a) (depth b)) #t)
          (else #f))))
    
    (define/public draw
      (lambda ()
        (for-each (lambda (arg) (send arg draw)) (sort objects lessthandepth))
        ))
    ))

(define scene
  (lambda (objs)
    
    (new scene% [objects objs])))

(define animate-me
 (lambda ()
   (define scn (scene (list (rectangle (point 0 400) (point 500 500) "brown" 3) ;ground
                            (rectangle (point 0 0) (point 500 500) "blue" 1) ;sky
                            (polygon (point 100 50) (point 150 100) (point 200 50) (point 150 0) "yellow" 5) ;sun
                            ;sunrays
                            (polygon (point 95 105) (point 200 0) "orange" 4) 
                            (polygon (point 200 105) (point 95 0) "orange" 4)
                            
                            ;mountains
                            (polygon (point 0 250) (point 120 100) (point 275 300) (point 400 50) (point 500 125) (point 500 500) (point 0 500) "gray" 2)
                            ))) 
   (draw scn)))

(animate-me)